generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  TODO
  WAITING_THEM
  WAITING_YOU
  DONE
}

enum ProjectState {
  IN_PROGRESS
  DONE
}

enum RuleType {
  EMAIL
  DOMAIN
  TOPIC
}

enum RuleAction {
  VIP
  SUPPRESS
}

enum MessageType {
  REGULAR
  ACTION
  CATCHUP
}

enum EmailDirection {
  INCOMING
  OUTGOING
  BOTH
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model EmailThread {
  id            String   @id @default(cuid())
  gmailId       String   @unique
  threadId      String
  subject       String?
  participants  String
  lastMessageAt DateTime
  isVip         Boolean  @default(false)
  direction     EmailDirection @default(INCOMING)
  project       Project? @relation(fields: [projectId], references: [id])
  projectId     String?
  tasks         Task[]

  @@index([threadId])
}

model Task {
  id         String      @id @default(cuid())
  title      String
  status     TaskStatus  @default(TODO)
  priority   Int         @default(0)
  dueAt      DateTime?
  thread     EmailThread? @relation(fields: [threadId], references: [id])
  threadId   String?
  project    Project?    @relation(fields: [projectId], references: [id])
  projectId  String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  backBurneredAt DateTime?
  ignoredAt  DateTime?
  messages   Message[]
}

model Project {
  id        String        @id @default(cuid())
  name      String
  state     ProjectState  @default(IN_PROGRESS)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  threads   EmailThread[]
  tasks     Task[]
  messages  Message[]
}

model Message {
  id        String   @id @default(cuid())
  role      String   // "user" or "assistant"
  content   String
  threadId  String?  // null = main chat, otherwise links to EmailThread
  createdAt DateTime @default(now())
  type      MessageType @default(REGULAR)
  taskId    String?
  projectId String?
  confidence Float?
  isRead    Boolean  @default(false)
  isInteracted Boolean @default(false)
  seenAt      DateTime?
  ignoredAt   DateTime?
  backBurneredAt DateTime?
  snoozedUntil DateTime?
  metadata  Json?
  task      Task?    @relation(fields: [taskId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])

  @@index([threadId, createdAt])
  @@index([type, isRead])
}

model Setting {
  id    String @id @default(cuid())
  key   String @unique
  value Json
}

model AuditEvent {
  id        String   @id @default(cuid())
  actor     String
  action    String
  entity    String
  entityId  String
  details   Json
  createdAt DateTime @default(now())

  @@index([entity, entityId])
}

model VipSuppressionRule {
  id             String      @id @default(cuid())
  type           RuleType
  pattern        String
  action         RuleAction
  unlessContains String?
  notes          String?
  confidence     Float?
  createdAt      DateTime    @default(now())

  @@index([type, pattern])
}
